Step used to build system of multiple drones

1) Download DroneKit API for Python. This step is essential in order to communicate with multiple drones
2) Download eventlet in order to switch threads everytime I need a thread switch
3) Download flask in order to build a server using Python
4) Download flask-socketio in order to be able to use socket in our system. Sockets are essential if we want sharing data between client and server


WiFi Interfaces:

- wlx40a5ef03ea3a --> Solo Green
- wlx40a5ef040181 --> Solo Gold

We assume that every WiFi antenna has an associated network.
So basically I could have a dict like this following one:

dict dronesConnectionInfo = {
	
	'Solo Gold' : {
	'drone' : "interfaceDrone",
	'camera' : "interfaceCamera"
	},
	'Solo Green' : {
	'drone' : "interfaceDrone",
	'camera': "interfaceCamera"
	},
	...
	#we have the possibility to easily extend the data structure with other drones and cameras in the future
}

It's not required to switch interface everytime I need to send command to drone. 	
We will have an initial setting used to connect each object(drone or camera) to a WiFi Network associated to a interface(antenna).
So basically the system will be built with the following settings:
1) Initial matching for object(drone and camera) and interface: to reach this goal a possible solution will be the presence of a button in client side called "Start" and on click it sends an AJAX request to server with the goal of connecting all the objects in our system, at this point the objects are: Solo Green and its camera SoloGreenRGB and Solo Gold and its camera SoloGoldRGB.

In order to have an automatic system that matches drone/camera with interface we need to have WiFi Network name that are simple:
- SoloGreenDrone/SoloGoldDrone -> WiFi Network of drones
- SoloGreenRGB/SoloGoldCameraRGB -> WiFi Network of cameras

We will work with regex in order to find the exact network for the drone and for the camera
