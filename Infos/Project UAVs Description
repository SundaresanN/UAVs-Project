Project UAVs Description

Fundamental server side modules:

	- dronekit api for python: this module is essential in order to communicate with 3dr drone
	- eventlet: this module is used to handle threads that will run server side everytime client will send request
	- flask: this module is used in order to build a server side using Python language
	- flask-socketio: this module is used to communicate realtime (using sockets) with client from server
	- wireless: this is a module useful for handling network command by Python script


Occurred problems and solution attempts:

	One of the biggest problem of this system is proper drone and camera WiFi networks, in fact they generate a WiFi networks and to communicate with them I need to be connected to these WiFi networks. Our system is thought in order to handle multiple drones and cameras with a single web application and it means that I need to be able to handle multiple drones with a simple homemade server. We need to find a solution to this incompatibility between this server with one WiFi antenna and multiple drones WiFi networks to handle.

	First solution attempt to this problem was switching WiFi network everytime I need to send command to a particular drone. This solution is not feasible because slow nature of WiFi switching that causes delay in each action that drone has to do.

	Second solution attempt is based on the following points:
	- We have multiple WiFi antennas connected with USB ports(so with USB hub we can have multiple WiFi connection)
	- Each entity of the system (drone or camera) is connected to an antenna of all the antennas available (if we have 2 drones with 2 cameras I will have 4 WiFi antennas)
	- I will send command to each entity using network interface, this process gets attempt of solution faster than previous one.

	Next step to do is understanding how to associate network interfaces with entities in the code. Let's see how the physical drone and camera are connected: each drone in our system will have a camera on board, so we need to understand wich camera is on which drone. In order to solve this problem, we have thought on "color solution", so basically each drone/camera couple will have a color that indetifies that couple. For instance: if I have one drone with one camera on board, I will identify them with "gold" color.
	Another step to do is understaing how we can identify a WiFi network for each couple, again we can do it with "color solution" and in addiction key word that allows us to discriminate between camera(and its type of camera) and drone, so:
		- Drone -> proper WiFi network: SoloGoldDrone (or something similar)
		- Camera -> proper WiFi network: SoloGoldCameraRGB (we need to specify type of camera)

	So now we are able to discriminate between cameras and drones and between every couple camera/drone of our system.
	Now the question is "what kind of structure can I use in order to identify a couple camera/drone and their interfaces?". Assuming that we have 2 drones and 2 cameras(and their "color IDs" are Gold and Green), we can try to answer to this question with this type of structure:

		drones = {
			'Solo Gold': ['', ''],
			'Solo Green': ['', '']
		}

	Let's analyze this data structure:

		- 'drones' is a dict; its keys are drone names and its values are array with a specific meaning
		- a value array is composed with 2 elements:
			1) first one represents network interface connected to drone's WiFi network;
			2) second one represents network interface connected to camera's WiFi network;

	So now we have to understand how we can automatically associate two network interfaces to a particular couple camera/drone. In order to solve this problem we can use this script:

		from wireless import Wireless
		conn = Wireless()
		for interface in conn.interfaces():
			print 'Interface: ', interface
			currentWiFiConnection = conn.current()
			if "Drone" in currentWiFiConnection:
				for drone in drones:
					droneColor = drone.split()[1]
					if droneColor in currentWiFiConnection:
						drones[drone][0] = interface
						print "I'm breaking the nested for"
						break
			if 'Camera' in currentWiFiConnection:
				for drone in drones:
					droneColor = drone.split()[1]
					if droneColor in currentWiFiConnection:
						drones[drone][1] = interface
						print "I'm breaking the nested for"
						break


	This script will be executed before index web page will be loaded.
	Assuming that WiFi networks available are:
		- SoloGoldDrone with netwrok interface "interfaceA"
		- SoloGreenDrone with netwrok interface "interfaceB"
		- SoloGoldCameraRGB with netwrok interface "interfaceC"
		- SoloGreenCameraRGB with netwrok interface "interfaceD"
	An example of 'drones' dict state(in an optimistica state, read below in 'Connection with drone' paragraph) at the end of the script execution could be this following one:

		drones = {
			'Solo Gold' : ['interfaceA', 'interfaceC'],
			'Solo Green' : ['interfaceB'. 'interfaceD']
		}


How system works with "network interfaces solution"

	In this paragraph I'm going to explain how we can be able to do actions with the drones and cameras:

		- connection with drone
		- taking off and flight

		Connection with drone

			This system being a web application will be composed of two sides: client and server.
			Let's talk about behavior of connection in both sides and we will see how the both sides interact.
			When client reaches the address where 'index.html' is located, on server side server will already have associated entities to interfaces. In this kind of process we could meet errors and issues, in fact could be possible that a drone or camera is not available and this must be communicated to client in terms of graphic informations. On client side in fact a table will be shown with all the drones that system have and a status for each drone will be shown(it's the same thing for camera on board of drone).
			We could have a system with 2 drones(and 2 cameras) like this following one:

				drones = {
					'Solo Gold' : ['interfaceA', ''],
					'Solo Green' : ['interfaceB'. 'interfaceD']
				}

			Table on client side will be filled with these informations:

				- Solo Gold:
					- Drone: available;
					- Camera(RGB): not available;
				- Solo Green:
					- Drone: available;
					- Camera: available;

			(Could be possible too that we have a drone unreacheble)
			At this point user knows which drone and camera are available or not.
			Depending on which is the status of each couple drone/camera on client side different possbile actions will be shown.
			(In the future we could have multiple infos about weather conditions, drone's battery, camera's battery and so on..)


What are the data structure of the system?

	In order to talk about this decision, we have to distinguish between server side and client side

	Server Side
