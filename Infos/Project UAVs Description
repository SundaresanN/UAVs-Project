Project UAVs Description

Fundamental server side modules:

	- dronekit api for python: this module is essential in order to communicate with 3dr drone
	- eventlet: this module is used to handle threads that will run server side everytime client will send request
	- flask: this module is used in order to build a server side using Python language
	- flask-socketio: this module is used to communicate realtime (using sockets) with client from server
	- wireless: this is a module useful for handling network command by Python script


Occurred problems and solution attempts:

	One of the biggest problem of this system is proper drone and camera WiFi networks, in fact they generate a WiFi networks and to communicate with them I need to be connected to these WiFi networks. Our system is thought in order to handle multiple drones and cameras with a single web application and it means that I need to be able to handle multiple drones with a simple homemade server. We need to find a solution to this incompatibility between this server with one WiFi antenna and multiple drones WiFi networks to handle.

	First solution attempt to this problem was switching WiFi network everytime I need to send command to a particular drone. This solution is not feasible because slow nature of WiFi switching that causes delay in each action that drone has to do.

	Second solution attempt is based on the following points:
	- We have multiple WiFi antennas connected with USB ports(so with USB hub we can have multiple WiFi connection)
	- Each entity of the system (drone or camera) is connected to an antenna of all the antennas available (if we have 2 drones with 2 cameras I will have 4 WiFi antennas)
	- I will send command to each entity using network interface, this process gets attempt of solution faster than previous one.

	Next step to do is understanding how to associate network interfaces with entities in the code. Let's see how the physical drone and camera are connected: each drone in our system will have a camera on board, so we need to understand wich camera is on which drone. In order to solve this problem, we have thought on "color solution", so basically each drone/camera couple will have a color that indetifies that couple. For instance: if I have one drone with one camera on board, I will identify them with "gold" color.
	Another step to do is understaing how we can identify a WiFi network for each couple, again we can do it with "color solution" and in addiction key word that allows us to discriminate between camera(and its type of camera) and drone, so:
		- Drone -> proper WiFi network: SoloGoldDrone (or something similar)
		- Camera -> proper WiFi network: SoloGoldCameraRGB (we need to specify type of camera)

	So now we are able to discriminate between cameras and drones and between every couple camera/drone of our system.
	Now the question is "what kind of structure can I use in order to identify a couple camera/drone and their interfaces?". Assuming that we have 2 drones and 2 cameras(and their "color IDs" are Gold and Green), we can try to answer to this question with this type of structure:

		drones = {
			'Solo Gold': ['', ''],
			'Solo Green': ['', '']
		}

	Let's analyze this data structure:

		- 'drones' is a dict; its keys are drone names and its values are array with a specific meaning
		- a value array is composed with 2 elements:
			1) first one represents network interface connected to drone's WiFi network;
			2) second one represents network interface connected to camera's WiFi network;

	So now we have to understand how we can automatically associate two network interfaces to a particular couple camera/drone. In order to solve this problem we can use this script:

		from wireless import Wireless
		conn = Wireless()
		for interface in conn.interfaces():
			print 'Interface: ', interface
			currentWiFiConnection = conn.current()
			if "Drone" in currentWiFiConnection:
				for drone in drones:
					droneColor = drone.split(In this kind of eventnection:
				for drone in drones:
					droneColor = drone.split()[1]
					if droneColor in currentWiFiConnection:
						drones[drone][1] = interface
						print "I'm breaking the nested for"
						break


	This script will be executed before index web page will be loaded.
	Assuming that WiFi networks available are:
		- SoloGoldDrone with netwrok interface "interfaceA"
		- SoloGreenDrone with netwrok interface "interfaceB"
		- SoloGoldCameraRGB with netwrok interface "interfaceC"
		- SoloGreenCameraRGB with netwrok interface "interfaceD"
	An example of 'drones' dict state(in an optimistica state, read below in 'Connection with drone' paragraph) at the end of the script execution could be this following one:

		drones = {
			'Solo Gold' : ['interfaceA', 'interfaceC'],
			'Solo Green' : ['interfaceB'. 'interfaceD']
		}


How system works with "network interfaces solution"

	In this paragraph I'm going to explain how we can be able to do actions with the drones and cameras:

		- connection with drone
		- taking off and flight

		Connection with drone

			This system being a web application will be composed of two sides: client and server.
			Let's talk about behavior of connection in both sides and we will see how the both sides interact.
			When client reaches the address where 'index.html' is located, on server side server will already have associated entities to interfaces. In this kind of process we could meet errors and issues, in fact could be possible that a drone or camera is not available and this must be communicated to client in terms of graphic informations. On client side in fact a table will be shown with all the drones that system have and a status for each drone will be shown(it's the same thing for camera on board of drone).
			We could have a system with 2 drones(and 2 cameras) like this following one:

				drones = {
					'Solo Gold' : ['interfaceA', ''],
					'Solo Green' : ['interfaceB'. 'interfaceD']
				}

			Table on client side will be filled with these informations:

				- Solo Gold:
					- Drone: available;
					- Camera(RGB): not available;
				- Solo Green:
					- Drone: available;
					- Camera: available;

			(Could be possible too that we have a drone unreacheble)
			At this point user knows which drone and camera are available or not.
			Depending on which is the status of each couple drone/camera on client side different possbile actions will be shown.
			(In the future we could have multiple infos about weather conditions, drone's battery, camera's battery and so on..)


What are the data structure of the system?

	In order to talk about this decision, we have to distinguish between client side and server side

	Client Side Data Structure Description

		Client side has been built with the idea to have classes for different behavior:
				- ClientBrain
				- Converter
				- Drone
				- GraphicBrain
				- Map
				- Location

		ClientBrain class description
			This class is the most important class of the web application.
			This class has the following class members:
				- socket -> it's useful for bidirectional communication channel with server
				- map -> it's an instance of Map class
				- drones -> it's an array of Drone instances
				- converter -> it's an instance of Converter class
				- graphicBrain -> it's an instance of GraphicBrain class
			Methods associated to ClientBrain class are:
				- initialGraphicSettings -> this method is used in order to set up the initial graphic components on the web page;
				- waitingClickOnMap -> this method is a "listener" method, basically it is waiting for a "click event" on the static map;
				- getIndexDrone -> this methods returns the drones array index using the name of the drone that I'm looking for

		Converter class description
			This class is used for various conversion between lat/lon coordinates and x/y coordinates and vice versa.
			It is used every time map has been clicked in a particular point and we need a conversion from x/y coordinates on the map and lat/lon coordinates that will be sent to drones when user want a drone in flight.
			This class has methods only:
				- getXYCoordinatesFromLatitudeLongitudeCoordinates
				- getLatitudeLongitudeCoordinatesFromXYCoordinates

		Drone class description
			This class represents a drone and all those informations that I need for it.
			Data members:
				- name -> it represents the name of the drone
				- homeLocation -> it represents the home location of the drone, so basically it is the location where the drone has been turned on
				- locationsToReach -> it is an array of Location object, and it represents locations that user want drone ready to reach in flight.
			Methods:
				- flight -> this is the method that allows drone to flight(if there is at least one location to reach)
				- deleteElementWithLatitudeAndLongitude -> this method delete a location from the locations array using latitude and longitude as parameters

		GraphicBrain class description
		 	This class has been build for handling graphic event on the webpage, so everything on the webpage that can cause an important graphic change it is handled with this class
			Data members:
				- firstLocationAdded -> this ????????????????????????
				- clickOnMap -> this is the variable that knows if the map has been clicked; in it has been clicked it means that webpage is showing me a "form" ready to be filled for adding a new location to reach.
			Methods:
				- init -> this method set up first graphic components in the web page: map image and drones table.
				- addMarker -> it is used for adding marker on the map; 3 different markers: home, drone, location. "home" marker is used to position a marker for the home location of a drone; "drone" is used to position the drone in flight mode(updating live location); "location" is used to put a location to reach marker on the map(using letter)
				- showTableForLocationToAdd -> this function shows a "form" table every time I click on the map and I want to add a new location to reach
				- addLocationIntoTableOfLocationsToReach -> when I decide to add a location with the "form" table, this function will be insert a new row in the locations to reach table

		Map class description
			This class represents all the info that I need in order to have a static image that represents a map and I want to extrapolate map data(lat/lon coordinates) from it.
			This class has only data members:
			 	- name
				- centerLatitude
				- centerLongitude
				- zoom
				- width
				- height
				- imagePath
			All these data members are required for precise conversions that I need.

		Location class description
			This is a class that represents a location in terms of latitude, longitude and altitude.
			Data members are:
				- latitude
				- longitude
				- altitude

	Client Side Flow of the Events Description

		In this section I want to describe the flow of the most important events. Let's analyze which are the most important events:
			- inital setting
			- drone connection
			- click on map
			- flight of drone

			Initial Setting Event Description

				In this kind of event we are talking about the "index.html" loading. When document that represents "index.html" has been loaded I need to create a ClientBrain object.
				ClientBrain initializer has as members a socket variable and a map object, in fact before I create a ClientBrain object, I need to create a socket var and a map object.
				When the ClientBrain object has been created, I can get data about drones from server: an AJAX request will be sent to server and it will respond with tha name of the drones in the system.
				After I've received the drones data, I can call the method "initialGraphicSettings" from ClientBrain object and setting up all the initial graphic elements(map image and drones table).
				In the drones table these infos will be displayed:
					- drone name
					- action button(it will change every time I click it)
					- drone status
					- drone battery
					- camera on board
					- camera battery
				The informations that could be change with time, will be updated when it is required.

			Drone Connection Event Description

				This event will be launched when user clicks on "Connect" button in the drones table.
				On button click, an AJAX request will be sent to server in order to obtain the connection with drone and the camera on board of it.
				If the drone has been connected, all the informations about camera and drone will be displayed in the table(camera battery is not reacheble), otherwise a "Not connected(previous error)" string will be displayed in the status box.
				Assuming that drone has been connected, its home location will be putted on the map with "home" marker and the informations about its home location coordinates will be inserted in the table used to display all the locations to reach.

			Click On Map Event Description

				When I click on the map, it means that I want to add a location to reach for a specific drone.
				A "form table" will be shown and the data that you are to fill in order to correctly add a location are altitude and drone name.
				When you click on "Confirm" button, a location will be added in the table of locations to reach and a marker will be putted on the map.

			Flight of Drone Event Description

				If the drone has at least one location to reach, it will be ready to have a flight.
				Before the flight another step is required: build location to reach.
				This is important in order to have an independence for choosing which drone must reach a location. The problem is that you don't know if a drone could reach that location(battery problem, collision problem), so you need a scheduling algorithm(TSP algorithm might be a solution) that assigns to each drone a list of locations to reach.
				Right now the scheduling algorithm is not implemented and the only way to assign a list of locations to reach is basically putting a marker on the map and assign it to a drone.
				The button 'Build Path' is shown because that future idea of scheduling algorithm.
				After the path has been built, the "Flight" button will appear. 
				You need only to press the "Flight" button on the drones table and your drone will fly in all of its locations.
				In the future a live location might be shown on the map.
				Every time a drone reaches one of the location that it has to reach, that location will be deleted from the locations to reache table.
